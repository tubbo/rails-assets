# /etc/init/sidekiq.conf - Sidekiq config
#
# From Mike Perham's GitHub
# https://github.com/mperham/sidekiq/blob/master/examples/upstart/sidekiq.conf
# See workers.conf for how to manage all Sidekiq instances at once.
#
# Save this config as /etc/init/sidekiq.conf then manage sidekiq with:
#   sudo start sidekiq index=0
#   sudo stop sidekiq index=0
#   sudo status sidekiq index=0
#
# Hack Upstart's reload command to 'quiet' Sidekiq:
#
#   sudo reload sidekiq index=0
#
# or use the service command:
#   sudo service sidekiq {start,stop,restart,status}
#

description "Rails-Assets Worker"

# This script is not meant to start on bootup, workers.conf
# will start all sidekiq instances explicitly when it starts.
#start on runlevel [2345]
#stop on runlevel [06]

setuid rails-assets
setgid rails-assets
env HOME=/home/rails-assets

respawn
respawn limit 3 30

# TERM is sent by sidekiqctl when stopping sidekiq. Without declaring these as
# normal exit codes, it just respawns.
normal exit 0 TERM

# Older versions of Upstart might not support the reload command and need
# this commented out.
reload signal USR1

instance $index

script
# this script runs in /bin/sh by default
# respawn as bash so we can source in rvm
exec /bin/bash <<'EOT'
  # rvm
  source /usr/local/rvm/bin/rvm
  # Logs out to /var/log/upstart/sidekiq.log by default
  cd /home/rails-assets/rails-apps/rails-assets/current
  exec bundle exec sidekiq -i ${index} -e production
EOT
end script
